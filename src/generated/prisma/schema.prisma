// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  firstname    String?        @unique
  lastname     String?        @unique
  email        String         @unique
  createdAt    DateTime       @default(now())
  clerkId      String         @unique
  subcription  Subcription?
  automations  Automation[]
  integrations Integrations[]
}

model Subcription {
  id         String   @id @default(uuid())
  userId     String?  @unique
  User       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  plan       PLAN     @default(FREE)
  customerId String?  @unique
}

model Automation {
  id        String    @id @default(uuid())
  name      String    @default("No Name Yet")
  createdAt DateTime  @default(now())
  active    Boolean   @default(false)
  userId    String?   @unique
  User      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  trigger   Trigger[]
  listener  Listener?
  posts     Post[]
  dms       Dms[]
  keywords  Keyword[]
}

model Integrations {
  id          String       @id @default(uuid())
  name        INTERGRATION @default(INSTAGRAM)
  createdAt   DateTime     @default(now())
  userId      String?      @unique
  User        User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  token       String       @unique
  expireAt    DateTime?
  instagramId String?      @unique
}

model Trigger {
  id         String      @id @default(uuid())
  type       String
  automateId String?
  Automation Automation? @relation(fields: [automateId], references: [id], onDelete: Cascade)
}

model Listener {
  id           String     @id @default(uuid())
  automateId   String     @unique
  Automation   Automation @relation(fields: [automateId], references: [id], onDelete: Cascade)
  listener     LISTENER   @default(MESSAGE)
  prompt       String
  commentReply String?
  dmCount      Int        @default(0)
  commentCount Int        @default(0)
}

model Post {
  id         String      @id @default(uuid())
  postid     String
  caption    String?
  media      String
  mediaType  MEDIA_TYPE  @default(IMAGE)
  automateId String?
  Automation Automation? @relation(fields: [automateId], references: [id], onDelete: Cascade)
}

model Dms {
  id         String      @id @default(uuid())
  automateId String?
  Automation Automation? @relation(fields: [automateId], references: [id])
  createdAt  DateTime    @default(now())
  senderId   String?
  receiverId String?
  message    String?
}

model Keyword {
  id         String      @id @default(uuid())
  word       String
  automateId String?     @unique
  Automation Automation? @relation(fields: [automateId], references: [id], onDelete: Cascade)

  @@unique([automateId, word])
}

enum INTERGRATION {
  INSTAGRAM
}

enum PLAN {
  VIP
  FREE
}

enum MEDIA_TYPE {
  IMAGE
  VIDEO
  ALBUM
}

enum LISTENER {
  AI
  MESSAGE
}
